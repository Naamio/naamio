variables:
  DOCKER_DRIVER: overlay
  CONTAINER_IMAGE: naamio/naamio #$CI_REGISTRY_IMAGE
  CONTAINER_TEST_IMAGE: $CONTAINER_IMAGE:$CI_BUILD_REF_NAME #$CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME
  CONTAINER_RELEASE_IMAGE: $CONTAINER_IMAGE:latest #$CI_REGISTRY_IMAGE:latest

stages:
  - test
  - build
  - deploy

test:
  image: ibmcom/swift-ubuntu:4.0
  stage: test
  script:
    - echo "Testing service"
    - make test
  tags:
    - docker
  only:
    - master
    - release
  artifacts:
    paths:
    - .build/debug

review:
  image: ibmcom/swift-ubuntu:4.0
  stage: test
  script:
    - echo "Reviewing service" 
    - make test
  only:
    - branches
  except: 
    - master
    - release

build:linux:
  image: ibmcom/swift-ubuntu:4.0
  stage: build
  before_script:
    # install ssh-agent
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    # run ssh-agent
    - eval $(ssh-agent -s)

    # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")

    # disable host key checking (NOTE: makes you susceptible to man-in-the-middle attacks)
    # WARNING: use only in docker container, if you use it with shell you will overwrite your user's ssh config
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - echo "Building release artifact."
    - swift build -c release -Xcc -fblocks -Xlinker -L/usr/local/lib 
  artifacts:
    paths:
      - .build/release
    expire_in: 1 week
  tags:
    - docker
  when: manual
  only:
    - release   

build:container:
  image: docker:latest
  stage: deploy
  services:
    - docker:dind
  script:
    - echo -n $DOCKER_HUB_SECRET | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker build --pull -t $CONTAINER_TEST_IMAGE -f Dockerfile .
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  when: manual
  tags:
    - docker
  only: 
    - release
  dependencies:
    - build:linux
 
tag:container:
  image: docker:latest
  stage: deploy
  services:
    - docker:dind
  script:
    - echo -n $DOCKER_HUB_SECRET | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker build --pull -t $CONTAINER_TEST_IMAGE -f Dockerfile .
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_IMAGE:$CI_BUILD_REF_NAME
    - docker push $CONTAINER_IMAGE:$CI_BUILD_REF_NAME
  when: manual
  tags:
    - docker
  only: 
    - tags
  dependencies:
    - build:linux

nightly:container:
  image: docker:latest
  stage: deploy
  services:
    - docker:dind
  script:
    - echo -n $DOCKER_HUB_SECRET | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker build --pull -t $CONTAINER_TEST_IMAGE -f Dockerfile .
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_IMAGE:nightly
    - docker push $CONTAINER_IMAGE:nightly
  when: on_success
  tags:
    - docker
  only:
    - schedules
  dependencies:
    - build:linux
